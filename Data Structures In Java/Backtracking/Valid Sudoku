public class Solution {
    public static boolean isItSudoku(int[][] matrix) {
        return solveSudoku(matrix, 0, 0);
    }

    private static boolean solveSudoku(int[][] matrix, int row, int col) {
        if (row == 9) {
            return true;
        }

        int nextRow, nextCol;
        if (col == 8) {
            nextRow = row + 1;
            nextCol = 0;
        } else {
            nextRow = row;
            nextCol = col + 1;
        }

        if (matrix[row][col] != 0) {
            return solveSudoku(matrix, nextRow, nextCol);
        }

        for (int num = 1; num <= 9; num++) {
            if (isValid(matrix, row, col, num)) {
                matrix[row][col] = num;
                if (solveSudoku(matrix, nextRow, nextCol)) {
                    return true;
                }
                matrix[row][col] = 0;
            }
        }

        return false;
    }

    private static boolean isValid(int[][] matrix, int row, int col, int num) {
        for (int i = 0; i < 9; i++) {
            if (matrix[i][col] == num) {
                return false;
            }
            if (matrix[row][i] == num) {
                return false;
            }
            if (matrix[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == num) {
                return false;
            }
        }
        return true;
    }
}
