public class Solution {
    static boolean isSubsetPresent(int[] arr, int n, int sum) {
        boolean dp[][] = new boolean[n + 1][sum + 1];

        // Initialize first column as true. A sum of zero is always possible with 0 elements
        for (int i = 0; i <= n; i++)
            dp[i][0] = true;

        // Initialize top row, except dp[0][0], as false. With 0 elements, no other sum is possible
        for (int i = 1; i <= sum; i++)
            dp[0][i] = false;

        // Fill the dp table in bottom-up manner
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                // If 'j' is greater than arr[i-1], then check if sum 'j' can be obtained by any of the following:
                // (a) including arr[i-1]
                // (b) excluding arr[i-1]
                if (j >= arr[i - 1])
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                else
                    // If 'j' is smaller than arr[i-1], then the sum 'j' can be obtained by excluding current item
                    dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][sum];
    }
}
