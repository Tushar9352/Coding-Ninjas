import java.util.*;

public class Solution {
    private static void DFS(int[][] edges, int sv, boolean[] visited, ArrayList<Integer> smallAns) {
        smallAns.add(sv);
        visited[sv] = true;
        int n = edges.length;
        for(int i = 0; i < n; i++) {
            if(edges[sv][i] == 1 && !visited[i]) {
                DFS(edges, i, visited, smallAns);
            }
        }
    }

    private static ArrayList<ArrayList<Integer>> allConnectedComponents(int[][] edges) {
        boolean[] visited = new boolean[edges.length];
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for(int i = 0; i < edges.length; i++) {
            if(!visited[i]) {
                ArrayList<Integer> smallAns = new ArrayList<>();
                DFS(edges, i, visited, smallAns);
                Collections.sort(smallAns);
                ans.add(smallAns);
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();
        int[][] edges = new int[V][V];
        for(int i = 0; i < E; i++) {
            int fv = s.nextInt();
            int sv = s.nextInt();
            edges[fv][sv] = 1;
            edges[sv][fv] = 1;
        }
        ArrayList<ArrayList<Integer>> ans = allConnectedComponents(edges);
        for(ArrayList<Integer> component : ans) {
            for(int i : component) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
