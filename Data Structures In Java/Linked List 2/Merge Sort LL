/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    public static Node<Integer> mergeSort(Node<Integer> head) {
        if (head == null || head.next == null) {
            return head;
        }

        // Split the list into two halves
        Node<Integer> middle = getMiddle(head);
        Node<Integer> nextOfMiddle = middle.next;
        middle.next = null;

        // Sort each half
        Node<Integer> left = mergeSort(head);
        Node<Integer> right = mergeSort(nextOfMiddle);

        // Merge the sorted halves
        Node<Integer> sortedList = sortedMerge(left, right);
        return sortedList;
    }

    private static Node<Integer> getMiddle(Node<Integer> head) {
        if (head == null) {
            return head;
        }

        Node<Integer> slow = head, fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    private static Node<Integer> sortedMerge(Node<Integer> a, Node<Integer> b) {
        Node<Integer> result = null;

        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        if (a.data <= b.data) {
            result = a;
            result.next = sortedMerge(a.next, b);
        } else {
            result = b;
            result.next = sortedMerge(a, b.next);
        }

        return result;
    }
}
