public class Solution {
    public static Node<Integer> kReverse(Node<Integer> head, int k) {
        if (head == null || k <= 1) {
            return head;
        }

        Node<Integer> current = head;
        Node<Integer> next = null;
        Node<Integer> prev = null;
        int count = 0;

        // Reverse first k nodes of the linked list
        while (count < k && current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }

        // next is now a pointer to (k+1)th node. Recursively call for the list starting from current and make rest of the list as next of first node
        if (next != null) {
            head.next = kReverse(next, k);
        }

        // prev is new head of the input list
        return prev;
    }
}
