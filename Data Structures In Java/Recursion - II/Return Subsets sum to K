public class solution {

    public static int[][] subsetsSumK(int input[], int k) {
        return subsetsSumK(input, k, 0);
    }

    private static int[][] subsetsSumK(int[] input, int k, int start) {
        if(start == input.length){
            if(k == 0){
                return new int[1][0];
            } else {
                return new int[0][0];
            }
        }
        
        int[][] smallOutput1 = subsetsSumK(input, k, start + 1);
        int[][] smallOutput2 = subsetsSumK(input, k - input[start], start + 1);
        
        int[][] output = new int[smallOutput1.length + smallOutput2.length][];
        int index = 0;
        for(int i = 0; i < smallOutput1.length; i++){
            output[index++] = smallOutput1[i];
        }
        
        for(int i = 0; i < smallOutput2.length; i++){
            output[index] = new int[smallOutput2[i].length + 1];
            output[index][0] = input[start];
            for(int j = 1; j <= smallOutput2[i].length; j++){
                output[index][j] = smallOutput2[i][j - 1];
            }
            index++;
        }
        
        return output;
    }
}
